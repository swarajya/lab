Magic Wallet 

global rockstar..
---------------------



QLDB

Ledger Name : metaversecloud

NFT TABLE STRUCTURE
--------------------
{
  nftId,
  nftName,
  nftOwnerId,
  nftPublishStatus,
  nftMintQuantity,  
  cloudStorageType,
  bucketName,
  bucketRegion,
  outputBucket,
  assetStoragePath,
  cdnURL,
  nftUnitPrice,
  nftCurrency,
  nftApiBaseURL,
  nftAuthTokens,
  nftEncryptionKey,
  nftIvKey,
  nftAddTime,
  nftModifiedTime
}



Create NFT
------------
SQS POST - SQS/lambdareader/

This Lambda function validates below fields before creating a new nft record.
All fields are mandatory
{
  nftId,
  nftName,
  nftOwnerId,
  nftPublishStatus,
  nftMintQuantity,  
  cloudStorageType,
  bucketName,
  bucketRegion,
  outputBucket,
  assetStoragePath,
  cdnURL,
  nftUnitPrice,
  nftCurrency,
  nftApiBaseURL,
  nftAuthTokens,
  nftEncryptionKey,
  nftIvKey,
  nftAddTime,
  nftModifiedTime
}

. Check for duplicate entry
. Check quantity, price are not null, zero values.
. check currency is valid currency

Return 
  {
    Update SQS Queqe with latest nftId, status
  }



PUT - /updatenft/{id}

  . Request 
    {
      nftId : '',
      nftName : 'new name',
      nftPublishStatus: 1      
    }
    
    Response 
    {
      responseCode,
      message
    }


GET  - /nfts
       . Get all list of NFTs
       . Accessed by Admin Group Only
       . Pagination to be added..
       
GET  - /usernfts/{userid}
       . Get all list of NFTs for a user     
            
GET  - /nfts/{nftId}
       . Get details of a particular nft
 
GET  - /nftcount/{nftId}
       . Get nft avaliability count, can be called for verification befor any transaction.
       





{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "nftId": {
      "type": "string"
    },
    "nftName": {
      "type": "string"
    },
    "nftOwnerId": {
      "type": "integer"
    },
    "nftPublishStatus": {
      "type": "string",
      "enum": ["Y", "N"]
    },
    "nftMintQuantity": {
      "type": "integer"
    },
    "cloudStorageType": {
      "type": "string"
    },
    "bucketName": {
      "type": "string"
    },
    "bucketRegion": {
      "type": "string"
    },
    "outputBucket": {
      "type": "string"
    },
    "assetStoragePath": {
      "type": "string"
    },
    "cdnURL": {
      "type": "string"
    },
    "nftUnitPrice": {
      "type": "number"
    },
    "nftCurrency": {
      "type": "string"
    },
    "nftApiBaseURL": {
      "type": "string"
    },
    "nftEncryptionKey": {
      "type": "string"
    },
    "nftIvKey": {
      "type": "string"
    }
  },
  "required": [
    "nftId",
    "nftName",
    "nftOwnerId",
    "nftPublishStatus",
    "nftMintQuantity",
    "cloudStorageType",
    "bucketName",
    "bucketRegion",
    "outputBucket",
    "assetStoragePath",
    "cdnURL",
    "nftUnitPrice",
    "nftCurrency",
    "nftApiBaseURL",
    "nftEncryptionKey",
    "nftIvKey"
  ]
}





{
  "nftId":"2",
  "nftName":"Test Hundred",
  "nftOwnerId":1,
  "nftPublishStatus":"Y",
  "nftMintQuantity":0,  
  "cloudStorageType":"aws",
  "bucketName":"mum-prd-vcincomingdata",
  "bucketRegion":"ap-south-1",
  "outputBucket":"mum-prd-vcoutgoingdata",
  "assetStoragePath":"videos/uploads/0AwbadCvnNij-1629899755524-tIs4VY6jX78x.mp4",
  "cdnURL":"https://d1zghpnvr1l6q.cloudfront.net",
  "nftUnitPrice":"10.45",
  "nftCurrency":"$",
  "nftApiBaseURL":"http:kkkk",
  "nftAuthTokens":"333333",
  "nftEncryptionKey":"4444444",
  "nftIvKey":"55555555",
  "nftAddTime":"33",
  "nftModifiedTime":"44"
}





walletId
walletUserId
walletTxnType
walletTxnAmount
walletBalance
walletTxnTime
walletBalance


POST - https://apiurl.amazonaws.com/Prod/createaccount/
POST - https://apiurl.amazonaws.com/Prod/checkfunds/
POST - https://apiurl.amazonaws.com/Prod/addfunds/
POST - https://apiurl.amazonaws.com/Prod/withdrawfunds/






My Update
------------

1. Updated my SQS reader (read and create nft) Lambda function and added automated Schema validator for all required fields for null check and formats.
2. Updated nft GET Apis and deployed all changes to amplify through Github.


-----------------------------

1. Wallet Structure Finalization. This is currect structure.

walletId
walletUserId
walletUserGroup
walletTxnType - debit / credit / transfer
walletTxnFrom
walletTxnTo
walletCurrency
walletTxnAmount
walletBalance
walletTxnTime

2. Create transction History in DynamoDb and Save All Wallet transctions to DynamoDB. 
3. Wallet APIs Development.
       POST - /createaccount (called during user creation)
       POST - /checkfunds
       POST - /addfunds
       POST -/withdrawfunds (Need more info on it)
       POST - /verifytransction (Need more thought on it)
       POST - /gettransctionhistory (export from DynamoDB)
       
4. Explore how to verify the transction with QLDB history.
                        

Next Week 
---------------

Integration help.


NFT Transfer APIs and Wallet Actions
-----------------------------------

POST - /transferNft

1. Transfer NFT from Owner to User, Deduct nftCount from nft data and add new entry in qldb with new user as ownerId.
2. Transfer required amount from User wallet to Nft Owner Account.
3. Make transaction entry in Dynamodb.
4. Return nft transfer status.
5. Do check user group, avaliable amount, currency conversion before nft transfer.
       
Week 3 
-------
Add API to verify the Block ID / Document ID in QLDB History.






 



